#!/usr/bin/env python

import re
import subprocess
import sys
import curses
from curses import wrapper
from platform import system

EXIM_LOG = None

# Try to guess exim log file location
if EXIM_LOG is None:
    if system() == 'Linux':
        EXIM_LOG = "/var/log/exim/main.log"
    elif system() == 'FreeBSD':
        EXIM_LOG = "/var/log/exim/mainlog"

# You may redefine controls here
ENTER_KEY = (curses.KEY_ENTER, 10, 13, ord('m'), ord('M'))
UP_KEY = (curses.KEY_UP, ord('k'), ord('K'))
DOWN_KEY = (curses.KEY_DOWN, ord('j'), ord('J'))
LEFT_KEY = (curses.KEY_LEFT, ord('h'), ord('H'))
RIGHT_KEY = (curses.KEY_RIGHT, ord('l'), ord('L'))
NEXT_KEY = (ord('n'), ord('N'))
PREV_KEY = (ord('p'), ord('P'))
DELIVER_KEY = (ord('d'), ord('D'))
DELETE_KEY = (ord('x'), ord('X'))
VIEW_LOG_KEY = (ord('g'), ord('G'))
REFRESH_KEY = (ord('R'), ord('r'), curses.KEY_F5)
HOME_KEY = (curses.KEY_HOME, )
END_KEY = (curses.KEY_END, )
MULTIPLE_SELECT_KEY = (32)
EXIT_KEY = (27, ord('q'), ord('Q'))

re_msg_info = re.compile(r"\s*(\S+)\s+(.+)\s+(.+)\s+<(.*)>")
re_frozen_check = re.compile(r"\*\*\* frozen \*\*\*")
re_receipient = re.compile(r"^\s+(\S+)\s*$")


class CursesScreen:
    """Curses class"""
    current_line = 1

    def __init__(self, screen):
        self.screen = screen

        curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_CYAN)
        self.highlight_text = curses.color_pair(1)
        self.normal_text = curses.A_NORMAL

        self.screen.border(0)
        curses.curs_set(0)
        max_rows, max_cols = self.screen.getmaxyx()
        self.MAX_BOX_ROW = max_rows - 10
        self.MAX_BOX_COLS = max_cols - 6

        self.box = curses.newwin(self.MAX_BOX_ROW + 2, self.MAX_BOX_COLS + 4, 1, 1)
        self.box.box()

    def box_refresh(self):
        self.box.refresh()

    def refresh(self):
        self.screen.refresh()
        self.box.refresh()

    def box_clear(self):
        self.current_line = 1
        self.box.erase()
        self.box.box()
        self.box.border(0)

    def erase(self):
        self.current_line = 1
        self.box.erase()
        self.screen.border(0)
        self.box.border(0)

    def redraw(self):
        self.erase()
        self.refresh()
        self.screen.border(0)
        curses.curs_set(0)
        max_rows, max_cols = self.screen.getmaxyx()
        self.MAX_BOX_ROW = max_rows - 10
        self.MAX_BOX_COLS = max_cols - 6
        self.box = curses.newwin(self.MAX_BOX_ROW + 2, self.MAX_BOX_COLS + 4, 1, 1)
        self.box.box()

    def box_string(self, text, x, color=None, y=None):
        if y is None:
            y = self.current_line
        if color is None:
            color = self.normal_text
        self.box.addstr(y, x, text, color)
        self.current_line += 1


class EximQueue:
    column_shift = 0
    top_line = 0
    selected_message = 0
    total_messages = 0
    queue = []

    def __init__(self):
        self.read_queue()

    def read_queue(self):
        queue = []
        current_message = {}

        exim_queue = subprocess.check_output("exim -bpr", shell=True).decode('utf-8').splitlines()

        for line in exim_queue:
            if line != '':
                line_result = re_msg_info.match(line)
                if line_result:
                    current_message = {
                        'time': line_result.group(1),
                        'size': line_result.group(2),
                        'id': line_result.group(3),
                        'from': line_result.group(4)
                    }
                    if re_frozen_check.search(line):
                        current_message['status'] = '*frozen* '
                    else:
                        current_message['status'] = ''
                    continue
                else:
                    line_result = re_receipient.match(line)
                    if line_result:
                        current_message['mailto'] = line_result.group(1)
                        queue.append(current_message)

        self.queue = queue
        self.total_messages = len(queue)
        self.selected_message = 0
        self.top_line = 0

    def get_selected_msg_id(self):
        return self.queue[self.selected_message]['id']

    def get_selected_msg_info(self):
        return self.get_message_info(self.selected_message)

    def get_message_info(self, msg_number):
        return {
            'id': self.queue[msg_number]['id'],
            'from': self.queue[msg_number]['from'],
            'mailto': self.queue[msg_number]['mailto'],
            'time': self.queue[msg_number]['time'],
            'status': self.queue[msg_number]['status']
        }


def get_content(exim_q, mode, cur_screen):
    cur_screen.box_clear()
    cur_screen.box_string("", 2, None, 2)
    cur_screen.box_refresh()
    msg_id = exim_q.get_selected_msg_id()
    try:
        if mode == 'content':
            content = subprocess.check_output("exim -Mvc {0}".format(msg_id), shell=True).decode('utf-8').splitlines()
            header = "** Message {from} {status}from <{from}> to {mailto}, {time} ago. **".format(
                **exim_q.get_selected_msg_info())
            content.insert(0, header)
            return content
        if mode == 'log':
            return subprocess.check_output("grep -w {0} {1}".format(msg_id, EXIM_LOG), shell=True).decode('utf-8')\
                .splitlines()
    except:
        return None


def contents_screen(cur_screen, exim_q, mode):
    max_col = cur_screen.MAX_BOX_COLS
    top_line = 0
    col_shift = 0

    content = get_content(exim_q, mode, cur_screen)
    max_line_len = len(max(content, key=len))

    display_content(content, cur_screen, top_line, col_shift)

    key = cur_screen.screen.getch()
    while key not in EXIT_KEY:
        if key in DELETE_KEY:
            delete_message(cur_screen, exim_q)
            break
        elif key in DELIVER_KEY:
            deliver_message(cur_screen, exim_q)
            break
        elif key in RIGHT_KEY and max_line_len > max_col and (max_line_len - col_shift) > 2:
            col_shift += 1
        elif key in LEFT_KEY and col_shift > 0:
            col_shift -= 1
        elif key in HOME_KEY:
            top_line, col_shift = 0, 0
        elif (key in PREV_KEY) and exim_q.selected_message > 0:
            exim_q.selected_message -= 1
            top_line, col_shift = 0, 0
            content = get_content(exim_q, mode, cur_screen)
        elif (key in NEXT_KEY) and exim_q.selected_message < exim_q.total_messages - 1:
            exim_q.selected_message += 1
            top_line, col_shift = 0, 0
            content = get_content(exim_q, mode, cur_screen)
        elif key in UP_KEY:
            # TODO
            pass
        elif key in DOWN_KEY:
            # TODO
            pass
        elif key in VIEW_LOG_KEY and mode != 'log':
            mode = 'log'
            content = get_content(exim_q, mode, cur_screen)
        elif key in ENTER_KEY and mode != 'content':
            mode = 'content'
            content = get_content(exim_q, mode, cur_screen)
        elif key in REFRESH_KEY:
            content = get_content(exim_q, mode, cur_screen)
        if key == curses.KEY_RESIZE:
            cur_screen.redraw()
            max_col = cur_screen.MAX_BOX_COLS
            top_line, col_shift = 0, 0
            display_help(cur_screen)
            cur_screen.refresh()
        else:
            key = cur_screen.screen.getch()
            continue

        if content is not None:
            display_content(content, cur_screen, top_line, col_shift)

        key = cur_screen.screen.getch()


def display_content(content, cur_screen, top_line, col_shift):
    cur_screen.box_clear()
    max_row = cur_screen.MAX_BOX_ROW + top_line
    max_col = cur_screen.MAX_BOX_COLS + col_shift

    for line in content[top_line:max_row]:
        cur_screen.box_string(line[col_shift:max_col], 2)

    cur_screen.box_refresh()


def delete_message(cur_screen, exim_q):
    msg_id = exim_q.get_selected_msg_id()
    cur_screen.box_clear()
    cur_screen.box_string("Deleting message {0}...".format(msg_id), 2)
    cur_screen.box_string("...", 2)
    cur_screen.box_refresh()
    subprocess.call(["exim", "-Mrm", msg_id])
    exim_q.read_queue()
    cur_screen.screen.getch()


def deliver_message(cur_screen, exim_q):
    msg_id = exim_q.get_selected_msg_id()
    cur_screen.box_clear()
    cur_screen.box_string("Attempting to deliver message {0}...".format(msg_id), 2)
    cur_screen.box_string("...", 2)
    cur_screen.box_refresh()
    subprocess.call(["exim", "-M", msg_id])
    exim_q.read_queue()
    cur_screen.screen.getch()


def display_queue(cur_screen, exim_q):
    for i in range(0, cur_screen.MAX_BOX_ROW):
        message_line_number = i + exim_q.top_line
        if exim_q.total_messages == 0:
            cur_screen.box_string("No messages in queue.", 2)
            break
        else:
            line = str(message_line_number + 1) + " {id} {status}from <{from}> to {mailto}, {time} ago.".format(
                **exim_q.get_message_info(message_line_number))

            if exim_q.column_shift >= len(line):
                exim_q.column_shift = len(line) - 1
            max_col = cur_screen.MAX_BOX_COLS + exim_q.column_shift
            if message_line_number == exim_q.selected_message:
                cur_screen.box_string(line[exim_q.column_shift:max_col], 2, cur_screen.highlight_text)
            else:
                cur_screen.box_string(line[:cur_screen.MAX_BOX_COLS], 2)
            if message_line_number == exim_q.total_messages - 1:
                break


def display_help(cur_screen):
    # Will be printed under the main box
    max_box_row = cur_screen.MAX_BOX_ROW
    cur_screen.screen.addstr(max_box_row + 3, 2, "ENTER or M - view message                 N/P - next/previous message")
    cur_screen.screen.addstr(max_box_row + 4, 2, "D - attempt to deliver message")
    cur_screen.screen.addstr(max_box_row + 5, 2, "X - delete message")
    cur_screen.screen.addstr(max_box_row + 6, 2, "G - grep exim log file for message ID")
    cur_screen.screen.addstr(max_box_row + 7, 2, "R or F5 - refresh")
    cur_screen.screen.addstr(max_box_row + 8, 2, "Q - exit")


def main(screen):
    exim_q = EximQueue()

    cur_screen = CursesScreen(screen)

    cur_screen.screen.addstr(2, 2, "Total messages in queue: {0}".format(exim_q.total_messages))
    display_queue(cur_screen, exim_q)
    display_help(cur_screen)
    cur_screen.refresh()

    # Enter main loop
    key = screen.getch()
    while key not in EXIT_KEY:
        current_line = exim_q.selected_message - exim_q.top_line
        if key in REFRESH_KEY:
            exim_q.read_queue()
        # Ignore other keys if there is no messages in queue
        elif exim_q.total_messages == 0:
            key = screen.getch()
            continue
        elif key == curses.KEY_RESIZE:
            cur_screen.redraw()
            display_help(cur_screen)
        elif key in ENTER_KEY:
            contents_screen(cur_screen, exim_q, 'content')
        elif (key in DOWN_KEY or key in NEXT_KEY) and exim_q.selected_message < exim_q.total_messages - 1:
            exim_q.selected_message += 1
            exim_q.column_shift = 0
            if current_line == cur_screen.MAX_BOX_ROW - 1:
                exim_q.top_line += 1
        elif key in END_KEY:
            exim_q.selected_message = exim_q.total_messages - 1
            exim_q.column_shift = 0
            if exim_q.total_messages > cur_screen.MAX_BOX_ROW:
                exim_q.top_line = exim_q.total_messages - cur_screen.MAX_BOX_ROW
        elif (key in UP_KEY or key in PREV_KEY) and exim_q.selected_message > 0:
            exim_q.selected_message -= 1
            exim_q.column_shift = 0
            if current_line == 0:
                exim_q.top_line -= 1
        elif (key in LEFT_KEY) and exim_q.column_shift > 0:
            exim_q.column_shift -= 1
        elif key in RIGHT_KEY:
            exim_q.column_shift += 1
        elif key in HOME_KEY and not exim_q.selected_message == 0:
            exim_q.column_shift = 0
            exim_q.selected_message = 0
            exim_q.top_line = 0
        elif key in DELETE_KEY:
            delete_message(cur_screen, exim_q)
        elif key in DELIVER_KEY:
            deliver_message(cur_screen, exim_q)
        else:
            key = screen.getch()
            continue

        cur_screen.box_clear()

        display_queue(cur_screen, exim_q)
        cur_screen.refresh()
        key = screen.getch()


if __name__ == "__main__":
    wrapper(main)
